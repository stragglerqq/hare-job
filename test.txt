# Function to start a process and set the window size and position
function Start-ProcessWithSizeAndPosition($path, $arguments, $width, $height, $left, $top) {
    # Start the process
    $process = Start-Process -PassThru -FilePath $path -ArgumentList $arguments

    # Define the SWP_SHOWWINDOW value
    $SWP_SHOWWINDOW = 0x0040

    # Define the SetWindowPos function
    $SetWindowPos = Add-Type -MemberDefinition @"
[DllImport("user32.dll", SetLastError = true)]
public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);
"@ -Name "Win32SetWindowPos" -Namespace "Win32Functions" -PassThru

    # Wait for the process to create its window
    Start-Sleep -Milliseconds 200

    # Change the window size and position
    $SetWindowPos::SetWindowPos($process.MainWindowHandle, [IntPtr]::Zero, $left, $top, $width, $height, $SWP_SHOWWINDOW)
}

# Set the base directory and project names
$baseDirectory = 'C:\Users\45276039\projects'
$projectNames = 'project1', 'project2', 'project3', 'project4', 'project5'

# Iterate over the project names and open a PowerShell window for each
for ($i = 0; $i -lt $projectNames.Length; $i++) {
    # Set the command to run
    $command = "cd '$baseDirectory\$($projectNames[$i])'; npm run start"

    # Calculate the window position
    $left = 600 * ($i % 3)
    $top = 400 * [Math]::Floor($i / 3)

    # Start the process with the specified size and position
    Start-ProcessWithSizeAndPosition -path "powershell.exe" -arguments "-NoExit", "-Command $command" -width 600 -height 400 -left $left -top $top
}
